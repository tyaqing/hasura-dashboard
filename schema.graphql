# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
    "refresh the cache entry"
    refresh: Boolean! = false,
    "measured in seconds"
    ttl: Int! = 60
) on QUERY

type CreateUserOutput {
    email: String!
    id: Int!
    password: String!
}

type JsonWebToken {
    token: String!
}

"mutation root"
type mutation_root {
    Login(email: String!, password: String!): JsonWebToken
    Signup(email: String!, password: String!): CreateUserOutput
}

"columns and relationships of \"npmvs.package\""
type npmvs_package {
    "唯一ID"
    id: Int!
    "包名"
    name: String!
    "An array relationship"
    package_tags(
        "distinct select on columns"
        distinct_on: [npmvs_package_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [npmvs_package_tag_order_by!],
        "filter the rows returned"
        where: npmvs_package_tag_bool_exp
    ): [npmvs_package_tag!]!
    "权重"
    weight: Int!
}

type npmvs_package_aggregate {
    aggregate: npmvs_package_aggregate_fields
    nodes: [npmvs_package!]!
}

"aggregate fields of \"npmvs.package\""
type npmvs_package_aggregate_fields {
    avg: npmvs_package_avg_fields
    count(columns: [npmvs_package_select_column!], distinct: Boolean): Int!
    max: npmvs_package_max_fields
    min: npmvs_package_min_fields
    stddev: npmvs_package_stddev_fields
    stddev_pop: npmvs_package_stddev_pop_fields
    stddev_samp: npmvs_package_stddev_samp_fields
    sum: npmvs_package_sum_fields
    var_pop: npmvs_package_var_pop_fields
    var_samp: npmvs_package_var_samp_fields
    variance: npmvs_package_variance_fields
}

"aggregate avg on columns"
type npmvs_package_avg_fields {
    "唯一ID"
    id: Float
    "权重"
    weight: Float
}

"aggregate max on columns"
type npmvs_package_max_fields {
    "唯一ID"
    id: Int
    "包名"
    name: String
    "权重"
    weight: Int
}

"aggregate min on columns"
type npmvs_package_min_fields {
    "唯一ID"
    id: Int
    "包名"
    name: String
    "权重"
    weight: Int
}

"aggregate stddev on columns"
type npmvs_package_stddev_fields {
    "唯一ID"
    id: Float
    "权重"
    weight: Float
}

"aggregate stddev_pop on columns"
type npmvs_package_stddev_pop_fields {
    "唯一ID"
    id: Float
    "权重"
    weight: Float
}

"aggregate stddev_samp on columns"
type npmvs_package_stddev_samp_fields {
    "唯一ID"
    id: Float
    "权重"
    weight: Float
}

"aggregate sum on columns"
type npmvs_package_sum_fields {
    "唯一ID"
    id: Int
    "权重"
    weight: Int
}

"columns and relationships of \"npmvs.package_tag\""
type npmvs_package_tag {
    id: Int!
    "An object relationship"
    package: npmvs_package!
    package_id: Int!
    "An object relationship"
    tag: npmvs_tag!
    tag_id: Int!
}

"aggregate var_pop on columns"
type npmvs_package_var_pop_fields {
    "唯一ID"
    id: Float
    "权重"
    weight: Float
}

"aggregate var_samp on columns"
type npmvs_package_var_samp_fields {
    "唯一ID"
    id: Float
    "权重"
    weight: Float
}

"aggregate variance on columns"
type npmvs_package_variance_fields {
    "唯一ID"
    id: Float
    "权重"
    weight: Float
}

"columns and relationships of \"npmvs.tag\""
type npmvs_tag {
    id: Int!
    name: String
    "An array relationship"
    package_tags(
        "distinct select on columns"
        distinct_on: [npmvs_package_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [npmvs_package_tag_order_by!],
        "filter the rows returned"
        where: npmvs_package_tag_bool_exp
    ): [npmvs_package_tag!]!
}

type query_root {
    "execute function \"npmvs.lucky_packages\" which returns \"npmvs.package\""
    npmvs_lucky_packages(
        "input parameters for function \"npmvs_lucky_packages\""
        args: npmvs_lucky_packages_args!,
        "distinct select on columns"
        distinct_on: [npmvs_package_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [npmvs_package_order_by!],
        "filter the rows returned"
        where: npmvs_package_bool_exp
    ): [npmvs_package!]!
    "execute function \"npmvs.lucky_packages\" and query aggregates on result of table type \"npmvs.package\""
    npmvs_lucky_packages_aggregate(
        "input parameters for function \"npmvs_lucky_packages_aggregate\""
        args: npmvs_lucky_packages_args!,
        "distinct select on columns"
        distinct_on: [npmvs_package_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [npmvs_package_order_by!],
        "filter the rows returned"
        where: npmvs_package_bool_exp
    ): npmvs_package_aggregate!
    "execute function \"npmvs.lucky_tags\" which returns \"npmvs.tag\""
    npmvs_lucky_tags(
        "input parameters for function \"npmvs_lucky_tags\""
        args: npmvs_lucky_tags_args!,
        "distinct select on columns"
        distinct_on: [npmvs_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [npmvs_tag_order_by!],
        "filter the rows returned"
        where: npmvs_tag_bool_exp
    ): [npmvs_tag!]!
    "fetch data from the table: \"npmvs.package\""
    npmvs_package(
        "distinct select on columns"
        distinct_on: [npmvs_package_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [npmvs_package_order_by!],
        "filter the rows returned"
        where: npmvs_package_bool_exp
    ): [npmvs_package!]!
    "fetch data from the table: \"npmvs.package_tag\""
    npmvs_package_tag(
        "distinct select on columns"
        distinct_on: [npmvs_package_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [npmvs_package_tag_order_by!],
        "filter the rows returned"
        where: npmvs_package_tag_bool_exp
    ): [npmvs_package_tag!]!
    "fetch data from the table: \"npmvs.package_tag\" using primary key columns"
    npmvs_package_tag_by_pk(id: Int!): npmvs_package_tag
    "fetch data from the table: \"npmvs.tag\""
    npmvs_tag(
        "distinct select on columns"
        distinct_on: [npmvs_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [npmvs_tag_order_by!],
        "filter the rows returned"
        where: npmvs_tag_bool_exp
    ): [npmvs_tag!]!
    "fetch data from the table: \"npmvs.tag\" using primary key columns"
    npmvs_tag_by_pk(id: Int!): npmvs_tag
}

type subscription_root {
    "execute function \"npmvs.lucky_packages\" which returns \"npmvs.package\""
    npmvs_lucky_packages(
        "input parameters for function \"npmvs_lucky_packages\""
        args: npmvs_lucky_packages_args!,
        "distinct select on columns"
        distinct_on: [npmvs_package_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [npmvs_package_order_by!],
        "filter the rows returned"
        where: npmvs_package_bool_exp
    ): [npmvs_package!]!
    "execute function \"npmvs.lucky_packages\" and query aggregates on result of table type \"npmvs.package\""
    npmvs_lucky_packages_aggregate(
        "input parameters for function \"npmvs_lucky_packages_aggregate\""
        args: npmvs_lucky_packages_args!,
        "distinct select on columns"
        distinct_on: [npmvs_package_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [npmvs_package_order_by!],
        "filter the rows returned"
        where: npmvs_package_bool_exp
    ): npmvs_package_aggregate!
    "execute function \"npmvs.lucky_tags\" which returns \"npmvs.tag\""
    npmvs_lucky_tags(
        "input parameters for function \"npmvs_lucky_tags\""
        args: npmvs_lucky_tags_args!,
        "distinct select on columns"
        distinct_on: [npmvs_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [npmvs_tag_order_by!],
        "filter the rows returned"
        where: npmvs_tag_bool_exp
    ): [npmvs_tag!]!
    "fetch data from the table: \"npmvs.package\""
    npmvs_package(
        "distinct select on columns"
        distinct_on: [npmvs_package_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [npmvs_package_order_by!],
        "filter the rows returned"
        where: npmvs_package_bool_exp
    ): [npmvs_package!]!
    "fetch data from the table: \"npmvs.package_tag\""
    npmvs_package_tag(
        "distinct select on columns"
        distinct_on: [npmvs_package_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [npmvs_package_tag_order_by!],
        "filter the rows returned"
        where: npmvs_package_tag_bool_exp
    ): [npmvs_package_tag!]!
    "fetch data from the table: \"npmvs.package_tag\" using primary key columns"
    npmvs_package_tag_by_pk(id: Int!): npmvs_package_tag
    "fetch data from the table in a streaming manner: \"npmvs.package_tag\""
    npmvs_package_tag_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [npmvs_package_tag_stream_cursor_input]!,
        "filter the rows returned"
        where: npmvs_package_tag_bool_exp
    ): [npmvs_package_tag!]!
    "fetch data from the table: \"npmvs.tag\""
    npmvs_tag(
        "distinct select on columns"
        distinct_on: [npmvs_tag_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [npmvs_tag_order_by!],
        "filter the rows returned"
        where: npmvs_tag_bool_exp
    ): [npmvs_tag!]!
    "fetch data from the table: \"npmvs.tag\" using primary key columns"
    npmvs_tag_by_pk(id: Int!): npmvs_tag
    "fetch data from the table in a streaming manner: \"npmvs.tag\""
    npmvs_tag_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [npmvs_tag_stream_cursor_input]!,
        "filter the rows returned"
        where: npmvs_tag_bool_exp
    ): [npmvs_tag!]!
}

"ordering argument of a cursor"
enum cursor_ordering {
    "ascending ordering of the cursor"
    ASC
    "descending ordering of the cursor"
    DESC
}

"select columns of table \"npmvs.package\""
enum npmvs_package_select_column {
    "column name"
    id
    "column name"
    name
    "column name"
    weight
}

"select columns of table \"npmvs.package_tag\""
enum npmvs_package_tag_select_column {
    "column name"
    id
    "column name"
    package_id
    "column name"
    tag_id
}

"select columns of table \"npmvs.tag\""
enum npmvs_tag_select_column {
    "column name"
    id
    "column name"
    name
}

"column ordering options"
enum order_by {
    "in ascending order, nulls last"
    asc
    "in ascending order, nulls first"
    asc_nulls_first
    "in ascending order, nulls last"
    asc_nulls_last
    "in descending order, nulls first"
    desc
    "in descending order, nulls first"
    desc_nulls_first
    "in descending order, nulls last"
    desc_nulls_last
}

"Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'."
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    "does the column match the given case-insensitive pattern"
    _ilike: String
    _in: [String!]
    "does the column match the given POSIX regular expression, case insensitive"
    _iregex: String
    _is_null: Boolean
    "does the column match the given pattern"
    _like: String
    _lt: String
    _lte: String
    _neq: String
    "does the column NOT match the given case-insensitive pattern"
    _nilike: String
    _nin: [String!]
    "does the column NOT match the given POSIX regular expression, case insensitive"
    _niregex: String
    "does the column NOT match the given pattern"
    _nlike: String
    "does the column NOT match the given POSIX regular expression, case sensitive"
    _nregex: String
    "does the column NOT match the given SQL regular expression"
    _nsimilar: String
    "does the column match the given POSIX regular expression, case sensitive"
    _regex: String
    "does the column match the given SQL regular expression"
    _similar: String
}

input npmvs_lucky_packages_args {
    num: Int
}

input npmvs_lucky_tags_args {
    num: Int
}

"Boolean expression to filter rows from the table \"npmvs.package\". All fields are combined with a logical 'AND'."
input npmvs_package_bool_exp {
    _and: [npmvs_package_bool_exp!]
    _not: npmvs_package_bool_exp
    _or: [npmvs_package_bool_exp!]
    id: Int_comparison_exp
    name: String_comparison_exp
    package_tags: npmvs_package_tag_bool_exp
    weight: Int_comparison_exp
}

"Ordering options when selecting data from \"npmvs.package\"."
input npmvs_package_order_by {
    id: order_by
    name: order_by
    package_tags_aggregate: npmvs_package_tag_aggregate_order_by
    weight: order_by
}

"order by aggregate values of table \"npmvs.package_tag\""
input npmvs_package_tag_aggregate_order_by {
    avg: npmvs_package_tag_avg_order_by
    count: order_by
    max: npmvs_package_tag_max_order_by
    min: npmvs_package_tag_min_order_by
    stddev: npmvs_package_tag_stddev_order_by
    stddev_pop: npmvs_package_tag_stddev_pop_order_by
    stddev_samp: npmvs_package_tag_stddev_samp_order_by
    sum: npmvs_package_tag_sum_order_by
    var_pop: npmvs_package_tag_var_pop_order_by
    var_samp: npmvs_package_tag_var_samp_order_by
    variance: npmvs_package_tag_variance_order_by
}

"order by avg() on columns of table \"npmvs.package_tag\""
input npmvs_package_tag_avg_order_by {
    id: order_by
    package_id: order_by
    tag_id: order_by
}

"Boolean expression to filter rows from the table \"npmvs.package_tag\". All fields are combined with a logical 'AND'."
input npmvs_package_tag_bool_exp {
    _and: [npmvs_package_tag_bool_exp!]
    _not: npmvs_package_tag_bool_exp
    _or: [npmvs_package_tag_bool_exp!]
    id: Int_comparison_exp
    package: npmvs_package_bool_exp
    package_id: Int_comparison_exp
    tag: npmvs_tag_bool_exp
    tag_id: Int_comparison_exp
}

"order by max() on columns of table \"npmvs.package_tag\""
input npmvs_package_tag_max_order_by {
    id: order_by
    package_id: order_by
    tag_id: order_by
}

"order by min() on columns of table \"npmvs.package_tag\""
input npmvs_package_tag_min_order_by {
    id: order_by
    package_id: order_by
    tag_id: order_by
}

"Ordering options when selecting data from \"npmvs.package_tag\"."
input npmvs_package_tag_order_by {
    id: order_by
    package: npmvs_package_order_by
    package_id: order_by
    tag: npmvs_tag_order_by
    tag_id: order_by
}

"order by stddev() on columns of table \"npmvs.package_tag\""
input npmvs_package_tag_stddev_order_by {
    id: order_by
    package_id: order_by
    tag_id: order_by
}

"order by stddev_pop() on columns of table \"npmvs.package_tag\""
input npmvs_package_tag_stddev_pop_order_by {
    id: order_by
    package_id: order_by
    tag_id: order_by
}

"order by stddev_samp() on columns of table \"npmvs.package_tag\""
input npmvs_package_tag_stddev_samp_order_by {
    id: order_by
    package_id: order_by
    tag_id: order_by
}

"Streaming cursor of the table \"npmvs_package_tag\""
input npmvs_package_tag_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: npmvs_package_tag_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input npmvs_package_tag_stream_cursor_value_input {
    id: Int
    package_id: Int
    tag_id: Int
}

"order by sum() on columns of table \"npmvs.package_tag\""
input npmvs_package_tag_sum_order_by {
    id: order_by
    package_id: order_by
    tag_id: order_by
}

"order by var_pop() on columns of table \"npmvs.package_tag\""
input npmvs_package_tag_var_pop_order_by {
    id: order_by
    package_id: order_by
    tag_id: order_by
}

"order by var_samp() on columns of table \"npmvs.package_tag\""
input npmvs_package_tag_var_samp_order_by {
    id: order_by
    package_id: order_by
    tag_id: order_by
}

"order by variance() on columns of table \"npmvs.package_tag\""
input npmvs_package_tag_variance_order_by {
    id: order_by
    package_id: order_by
    tag_id: order_by
}

"Boolean expression to filter rows from the table \"npmvs.tag\". All fields are combined with a logical 'AND'."
input npmvs_tag_bool_exp {
    _and: [npmvs_tag_bool_exp!]
    _not: npmvs_tag_bool_exp
    _or: [npmvs_tag_bool_exp!]
    id: Int_comparison_exp
    name: String_comparison_exp
    package_tags: npmvs_package_tag_bool_exp
}

"Ordering options when selecting data from \"npmvs.tag\"."
input npmvs_tag_order_by {
    id: order_by
    name: order_by
    package_tags_aggregate: npmvs_package_tag_aggregate_order_by
}

"Streaming cursor of the table \"npmvs_tag\""
input npmvs_tag_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: npmvs_tag_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input npmvs_tag_stream_cursor_value_input {
    id: Int
    name: String
}
